#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 29 14:54:29 2019

@author: amarquet
"""

import numpy
from lfsr_utils import lfsr, search_poly_lfsr, search_seed_lfsr2

######Generate synthetic sequence######
      
##L=9
##poly = [0, 0, 1, 1, 1, 0, 1, 1, 1]
##seed = [0, 1, 1, 0, 1, 1, 1, 0, 0]
#L=5
#poly=[0,1,1,0,1]
#seed=[0,1,0,0,0]
#
#print('Polyniomial: ' + str(poly))
#print('Seed: ' + str(seed))
#
#seq = lfsr(poly, seed, 3*L+1)

seq_hexa = [0xff, 0xff, 0x2d, 0xff, 0x78, 0xff, 0x30, 0x2e, 0x0, 0x2e, 0x12,
            0x3c, 0x14, 0x28, 0xa, 0x30, 0x36, 0x0, 0x1e, 0x12, 0x2e, 0x14,
            0x3c, 0xa, 0x28, 0x36, 0x30, 0x1e, 0x12, 0x2e, 0x6, 0x3c, 0xc,
            0x28, 0x3a, 0x30, 0x24, 0x12, 0x18, 0x6, 0x30, 0xc, 0x0, 0x3a,
            0x0, 0x24, 0x0, 0x18, 0x0, 0x30, 0x12, 0x0, 0x14, 0x0, 0x18,
            0x0, 0x30, 0x0, 0x12, 0x12, 0x6, 0x14, 0x1e, 0x18, 0x3c, 0x30,
            0x28, 0x12, 0x30, 0x6, 0x12, 0x1e, 0x14, 0x3c, 0x18, 0x28, 0x22,
            0x30, 0x14, 0x12, 0xa, 0x14, 0x36, 0x18, 0x1e, 0x22, 0x3c, 0x14,
            0x28, 0xa, 0x30, 0x36, 0x0, 0x1e, 0x0, 0x3c, 0x0, 0x28, 0x12, 0x30,
            0x6, 0x0, 0xc, 0x0, 0x28, 0x0, 0x22, 0x12, 0x14, 0x6, 0x18, 0xc,
            0x22, 0x28, 0x14, 0x22, 0x18, 0x14, 0x22, 0x18, 0x6, 0x22, 0xc,
            0x14, 0x3a, 0x18, 0x36, 0x22, 0x1e, 0x6, 0x3c, 0xc, 0x28, 0x3a,
            0x22, 0x36, 0x14, 0x1e, 0x18, 0x3c, 0x30, 0x28, 0x0, 0x22, 0x0,
            0x14, 0x12, 0x18, 0x14, 0x30, 0xa, 0x0, 0x24, 0x0, 0xa, 0x12, 0x36,
            0x14, 0xc, 0xa, 0x3a, 0x24, 0x36, 0xa, 0xc, 0x36, 0x3a, 0xc, 0x24,
            0x3a, 0xa, 0x36, 0x36, 0xc, 0xc, 0x3a, 0x28, 0x24, 0x22, 0xa, 0x14,
            0x36, 0xa, 0xc, 0x36, 0x28, 0xc, 0x22, 0x28, 0x14, 0x30, 0xa, 0x0,
            0x36, 0x12, 0xc, 0x6, 0x28, 0x1e, 0x30, 0x2e, 0x0, 0x2e, 0x12, 0x3c,
            0x6, 0x3a, 0x1e, 0x36, 0x2e, 0xc, 0x2e, 0x3a, 0x3c, 0x36, 0x3a, 0x1e,
            0x36, 0x2e, 0xc, 0x3c, 0x3a, 0x3a, 0x36, 0x24, 0x1e, 0xa, 0x2e, 0x36,
            0x3c, 0x1e, 0x3a, 0x3c, 0x24, 0x3a, 0xa, 0x24, 0x36, 0x18, 0x1e,
            0x30, 0x3c, 0x12, 0x3a, 0x14, 0x24, 0x18, 0x18, 0x30, 0x30, 0x0,
            0x12, 0x12, 0x14, 0x6, 0x18, 0xc, 0x30, 0x3a, 0x0, 0x36, 0x12, 0xc,
            0x6, 0x28, 0xc, 0x30, 0x3a, 0x12, 0x36, 0x6, 0xc, 0x1e, 0x28, 0x2e,
            0x30, 0x3c, 0x12, 0x28, 0x6, 0x22, 0x1e, 0x6, 0x2e, 0x1e, 0x3c, 0x3c,
            0x28, 0x28, 0x22, 0x22, 0x6, 0x6, 0x1e, 0xc, 0x3c, 0x28, 0x28, 0x30,
            0x22, 0x12, 0x6, 0x14, 0xc, 0xa, 0x28, 0x36, 0x30, 0xc, 0x12, 0x3a,
            0x14, 0x24, 0xa, 0x18, 0x36, 0x22, 0xc, 0x14, 0x3a, 0x18, 0x24, 0x30,
            0x18, 0x12, 0x22, 0x14, 0x14, 0xa, 0x18, 0x24, 0x30, 0x18, 0x12, 0x22,
            0x14, 0x14, 0xa, 0xa, 0x24, 0x24, 0x18, 0xa, 0x22, 0x24, 0x14, 0x18,
            0xa, 0x22, 0x24, 0x6, 0xa, 0x1e, 0x24, 0x3c, 0x18, 0x3a, 0x22, 0x36,
            0x6, 0x1e, 0x1e, 0x3c, 0x3c, 0x3a, 0x3a, 0x36, 0x36, 0xc, 0x1e, 0x28,
            0x3c, 0x22, 0x3a, 0x6, 0x36, 0x1e, 0xc, 0x2e, 0x28, 0x3c, 0x22, 0x3a,
            0x6, 0x36, 0x1e, 0x1e, 0x2e, 0x2e, 0x3c, 0x2e, 0x3a, 0x2e, 0x36, 0x3c,
            0x1e, 0x3a, 0x2e, 0x24, 0x2e, 0x18, 0x2e, 0x22, 0x3c, 0x6, 0x3a, 0xc,
            0x24, 0x28, 0x18, 0x22, 0x22, 0x6, 0x6, 0xc, 0xc, 0x3a, 0x28, 0x24,
            0x22, 0xa, 0x6, 0x24, 0xc, 0x18, 0x3a, 0x30, 0x24, 0x12, 0xa, 0x6,
            0x24, 0xc, 0x18, 0x28, 0x30, 0x30, 0x12, 0x0, 0x6, 0x0, 0xc, 0x12,
            0x28, 0x6, 0x30, 0x1e, 0x0, 0x3c, 0x0, 0x3a, 0x12, 0x24, 0x6, 0xa,
            0x1e, 0x24, 0x3c, 0xa, 0x3a, 0x24, 0x24, 0xa, 0xa, 0x36, 0x24,
            0x1e, 0xa, 0x2e, 0x24, 0x2e, 0xa, 0x3c, 0x36, 0x28, 0x1e, 0x22,
            0x2e, 0x14, 0x2e, 0xa, 0x3c, 0x24, 0x28, 0x18, 0x22, 0x30, 0x14,
            0x0, 0xa, 0x12, 0x24, 0x14, 0x18, 0x18, 0x30, 0x22, 0x0, 0x6, 0x12,
            0x1e, 0x14, 0x2e, 0x18, 0x2e, 0x22, 0x2e, 0x6, 0x2e, 0x1e, 0x0, 0x0, 0x0, 0x0, 0x24, 0x6]
seq = numpy.unpackbits(numpy.array(seq_hexa, dtype=numpy.uint8))
print(seq)

#######Find LFSR parameters######

est_poly = -1
est_seed = -1
L = 2
found = False

while not found:
    print('Searching a candidate polyniomial...')
    est_poly = search_poly_lfsr(seq, L)
    est_seed = numpy.flipud(seq[0:L])
    
    L+=1
    
    if(L>128):
        break
    
    if est_poly is None:
        print('\n No candidate found for L = ' + str(L))
        continue

    print('Testing sequence generated by estimated LFSR...')    
    for can_poly in est_poly:
        est_seq = lfsr(can_poly, est_seed, len(seq))
        if (seq == est_seq).all():
            print('\nFound -> poly = ' + str(can_poly) + ', seed = ' + str(est_seed))
            found = True
            break
    
    if not found:
        print('No sequence correspond.\n')