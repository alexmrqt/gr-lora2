#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 29 14:54:29 2019

@author: amarquet
"""

import numpy
import scipy
from lfsr_utils import lfsr, search_poly_lfsr, search_seed_lfsr2

######Generate synthetic sequence######
      
#L=9
#poly = [0, 0, 1, 1, 1, 0, 1, 1, 1]
#seed = [0, 1, 1, 0, 1, 1, 1, 0, 0]
##L=5
##poly=[0,1,1,0,1]
##seed=[0,1,0,0,0]
#
#print('Polyniomial: ' + str(poly))
#print('Seed: ' + str(seed))
#
#seq = lfsr(poly, seed, 3*L+1)
#
#seq_hexa = [239, 191, 15, 15, 31, 8, 216, 176, 113, 243, 193, 195, 135,
#            30, 60, 172, 216, 161, 83, 174, 77, 138, 5, 36, 145, 34, 64, 146,
#            25, 178, 112, 233, 225, 3, 23, 110, 93, 144, 35, 86, 181, 89, 110,
#            197, 139, 7, 118, 204, 24, 49, 102, 0, 152, 35, 84, 245, 41, 194,
#            148, 28, 232, 212, 185]
#seq = numpy.unpackbits(numpy.array(seq_hexa, dtype=numpy.uint8))

seq = scipy.fromfile(open("capture_zeros_4_7.raw"), dtype=scipy.uint8)
print(len(seq))
seq = seq[:2*128]
#print(seq)

#######Find LFSR parameters######

est_poly = -1
est_seed = -1
L = 127
found = False

while not found:
    L+=1
    
    if(L>128):
        break
    
    print('Searching a candidate polyniomial...')
    est_poly = search_poly_lfsr(seq, L)
    est_seed = numpy.flipud(seq[0:L])

    if est_poly is None:
        print('\n No candidate found for L = ' + str(L))
        continue

    print('Testing sequence generated by estimated LFSR...')    
    for can_poly in est_poly:
        print('Trying with poly=' + str(numpy.packbits(can_poly)) + ' and seed=' + str(numpy.packbits(est_seed)))
        est_seq = lfsr(can_poly, est_seed, len(seq))
        if (seq == est_seq).all():
            print('\nFound!')
            found = True
            break
        else:
            print('Reference and generated sequence have ' + str(numpy.sum(numpy.abs(seq - est_seq))) + ' bits that differs.')
    
    if not found:
        print('No sequence correspond.\n')