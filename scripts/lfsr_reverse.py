#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 29 14:54:29 2019

@author: amarquet
"""

import numpy
import scipy
from lfsr_utils import lfsr, search_poly_lfsr, search_seed_lfsr2

######Generate synthetic sequence######
      
#L=9
#poly = [0, 0, 1, 1, 1, 0, 1, 1, 1]
#seed = [0, 1, 1, 0, 1, 1, 1, 0, 0]
##L=5
##poly=[0,1,1,0,1]
##seed=[0,1,0,0,0]
#
#print('Polyniomial: ' + str(poly))
#print('Seed: ' + str(seed))
#
#seq = lfsr(poly, seed, 3*L+1)
#
#seq_hexa = [0x2e, 0xff, 0x5c, 0xff, 0xe8, 0xff, 0x00, 0xff, 0xd1, 0x2e, 0x72, 0x5c, 0x65, 0xe8, 0x4b, 0x00, 0x17, 0xd1, 0xff, 0x72, 0x2e, 0x65, 0x5c, 0x4b, 0xe8, 0x17, 0xd1, 0xff, 0xa3, 0x2e, 0xc6, 0x5c, 0x8d, 0xe8, 0x9a, 0xd1, 0xb4, 0xa3, 0xe8, 0xc6, 0x00, 0x8d, 0x00, 0x9a, 0x00, 0xb4, 0x00, 0xe8, 0xd1, 0x00, 0x72, 0x00, 0xb4, 0x00, 0xe8, 0x00, 0xd1, 0xd1, 0xa3, 0x72, 0x17, 0xb4]
seq_hexa = [0xaf, 0xfd, 0x5b, 0xf7, 0xf4, 0xcf, 0x40, 0x7f, 0xb1, 0x2f, 0x71, 0x58, 0x6d, 0xf4, 0x7b, 0x62, 0xd7, 0x51, 0x7e, 0x71, 0x28, 0x69, 0x4c, 0x73, 0xa8, 0xf7, 0xd1, 0xfe, 0xa1, 0x29, 0xca, 0x44, 0xad, 0x88, 0x5a, 0x41, 0xb5, 0x00, 0xee, 0xce, 0x14, 0xbd, 0x48, 0x5a, 0x00, 0xb5, 0x82, 0xe4]
seq = numpy.unpackbits(numpy.array(seq_hexa, dtype=numpy.uint8))
#seq = numpy.unpackbits(numpy.array(seq_hexa[1::2], dtype=numpy.uint8))

#seq = scipy.fromfile(open("capture_zeros_4_8.raw"), dtype=scipy.uint8)
#print(len(seq))
#seq = seq[:2*128]
#print(seq)

#######Find LFSR parameters######

est_poly = -1
est_seed = -1
L = 1
found = False

while not found:
    L+=1
    
    if(L>128):
        break
    
    print('Searching a candidate polyniomial...')
    est_poly = search_poly_lfsr(seq, L)
    est_seed = numpy.flipud(seq[0:L])

    if est_poly is None:
        print('\n No candidate found for L = ' + str(L))
        continue

    print('Testing sequence generated by estimated LFSR...')    
    for can_poly in est_poly:
        print('Trying with poly=' + str(numpy.packbits(can_poly)) + ' and seed=' + str(numpy.packbits(est_seed)))
        #print('Trying with poly=' + str(can_poly) + ' and seed=' + str(est_seed))
        est_seq = lfsr(can_poly, est_seed, len(seq))
        if (seq == est_seq).all():
            print('\nFound!')
            found = True
            break
        else:
            print('Reference and generated sequence have ' + str(numpy.sum(numpy.abs(seq - est_seq))) + ' bits that differs.')
        
        #Hold on
        input()
    
    if not found:
        print('No sequence correspond.\n')