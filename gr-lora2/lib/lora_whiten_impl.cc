/* -*- c++ -*- */
/*
 * Copyright 2019 Alexandre Marquet.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "lora_whiten_impl.h"

namespace gr {
  namespace lora2 {
	
	static const uint8_t d_sf9_cr4_wh[] = {
         0xff, 0x2e, 0xff, 0x5b, 0xff, 0xf0, 0xdf, 0x00, 0x7f, 0x91, 0x2f, 0x70,
		 0x58, 0x6d, 0xf8, 0x6b, 0x40, 0x97, 0xd1, 0x7f, 0x73, 0x2c, 0x61, 0x5c,
		 0x53, 0xe8, 0x77, 0xd1, 0xfe, 0xa3, 0x2c, 0xca, 0x4c, 0xad, 0xe8, 0xda,
		 0x51, 0xb5, 0x03, 0xea, 0xc6, 0x14, 0x8d, 0x48, 0x1a, 0x00, 0xb4, 0x00,
		 0xe4, 0x95, 0x11, 0x52, 0x02, 0x34, 0x20, 0xe9, 0x03, 0xd7, 0xd9, 0xbb,
		 0x52, 0x67, 0x70, 0xae, 0xe1, 0xdf, 0xd7, 0xe0, 0xb3, 0xf1, 0x47, 0xb6,
		 0x0e, 0xbd, 0xdf, 0x3d, 0xe0, 0x62, 0xf3, 0x15, 0xb6, 0x4b, 0xb5, 0x94,
		 0x3d, 0x26, 0x6c, 0x6c, 0x05, 0x28, 0x4b, 0x01, 0x15, 0x07, 0x26, 0x1c,
		 0x7c, 0x81, 0x28, 0x03, 0x81, 0xc4, 0x06, 0x50, 0x10, 0x09, 0xb8, 0xf2,
		 0xe3, 0xb5, 0x44, 0x3f, 0x51, 0x62, 0x19, 0xcc, 0xb2, 0x39, 0xb5, 0x21,
		 0x3c, 0xca, 0x68, 0xbd, 0xd4, 0xcb, 0x79, 0x16, 0xa0, 0xaa, 0xc8, 0x4c,
		 0xa5, 0x59, 0x9b, 0x72, 0x56, 0xb6, 0x2a, 0xe2, 0x4c, 0x3c, 0x79, 0xa1,
		 0xf2, 0xb0, 0xb7, 0x74, 0xe0, 0x75, 0x34, 0xda, 0x88, 0xe5, 0xf0, 0x49,
		 0x75, 0xca, 0x7d, 0xad, 0xda, 0xdb, 0xa5, 0xc7, 0xc8, 0x89, 0xca, 0x80,
		 0xbd, 0x25, 0xeb, 0x0b, 0xc7, 0xc5, 0x8b, 0x50, 0x82, 0x19, 0x15, 0xf2,
		 0x8b, 0xe4, 0xc5, 0x4f, 0x52, 0xda, 0x09, 0x5c, 0xf2, 0x08, 0x24, 0x01,
		 0x48, 0xdd, 0xd6, 0x83, 0x7c, 0x0f, 0x68, 0xfe, 0xa1, 0xf8, 0xdd, 0x22,
		 0xbb, 0x8d, 0xd7, 0xcb, 0xbe, 0x65, 0xf8, 0x81, 0x36, 0x7d, 0xe5, 0xd7,
		 0xdb, 0xdf, 0x46, 0x2a, 0x8b, 0x9c, 0x77, 0xba, 0xc7, 0xe5, 0x9f, 0xcb,
		 0x2b, 0x19, 0x95, 0x32, 0xda, 0xdd, 0x65, 0x7a, 0x48, 0xb6, 0x1d, 0xf4,
		 0x36, 0xd1, 0x1d, 0xf2, 0x7a, 0xb9, 0xb6, 0xe0, 0xe0, 0x30, 0xb1, 0x11,
		 0xf2, 0xe3, 0x14, 0xc4, 0xe0, 0x85, 0x35, 0x2b, 0x19, 0x46, 0xe2, 0xdf,
		 0xc5, 0xea, 0x8d, 0xed, 0x6b, 0x23, 0x66, 0x16, 0x5d, 0xf8, 0x6c, 0x2a,
		 0xe9, 0x3c, 0xe3, 0x59, 0x16, 0xa2, 0xfb, 0x50, 0x26, 0x1a, 0x3c, 0x3c,
		 0xb9, 0x39, 0xa1, 0xa4, 0x1b, 0xc8, 0x1e, 0x74, 0x7c, 0x28, 0x78, 0xd0,
		 0xa5, 0x77, 0xce, 0x51, 0x3c, 0x2b, 0x68, 0xc6, 0x50, 0x8e, 0x76, 0x82,
		 0x75, 0xc0, 0xab, 0xf9, 0x66, 0x71, 0x8f, 0xb3, 0x96, 0xe8, 0x94, 0x81,
		 0xb9, 0xd2, 0x71, 0x63, 0xbb, 0x82, 0xf0, 0xc4, 0x95, 0xf9, 0x72, 0x73,
		 0x64, 0x6d, 0x96, 0x00, 0x84, 0x05, 0xf9, 0x1a, 0x73, 0xb6, 0x63, 0x34,
		 0x82, 0x93, 0x25, 0xf7, 0x1a, 0x2f, 0x97, 0x89, 0x31, 0x1b, 0xd9, 0x57,
		 0x93, 0x6e, 0x2f, 0x8f, 0x08, 0x43, 0x59, 0xfe, 0x73, 0xdc, 0x2e, 0x38,
		 0x8f, 0x24, 0x43, 0x07, 0xe2, 0x9f, 0x84, 0xae, 0x38, 0x8f, 0xa6, 0x41,
		 0x07, 0x23, 0xbf, 0x17, 0x2e, 0xfe, 0x0e, 0xf9, 0x47, 0x36, 0x27, 0xed,
		 0x3f, 0xda, 0x7e, 0xb7, 0xfb, 0x37, 0x36, 0x93, 0xed, 0x46, 0x1a, 0x5d,
		 0xb7, 0x1d, 0x31, 0xbb, 0x91, 0x86, 0x02, 0x2d, 0x5d, 0x98, 0x3d, 0x6c,
		 0xbf, 0xb8, 0x96, 0x74, 0x2d, 0xe9, 0xd8, 0xd5, 0x68, 0xbb, 0xb8, 0x86,
		 0xb4, 0x8c, 0xe1, 0xea, 0xd7, 0x09, 0xb3, 0x20, 0x26, 0x51, 0x8d, 0xa2,
		 0xee, 0x11, 0x09, 0x36, 0x24, 0xed, 0x51, 0x8a, 0x20, 0x66, 0x53, 0x91,
		 0x36, 0x41, 0xed, 0x1a, 0x1b, 0x66, 0x27, 0x4c, 0x96, 0x07, 0x45, 0x3f,
		 0x22, 0xbe, 0xe6, 0x29, 0x47, 0x56, 0x0b, 0x49, 0xbf, 0xd2, 0xff, 0xa7,
		 0x2c, 0x92, 0x52, 0xac, 0x09, 0x29, 0x92, 0x80, 0x64, 0x92, 0x9c, 0x6a,
		 0xac, 0xc0, 0x88, 0x39, 0x81, 0xa2, 0xd1, 0x50, 0x7a, 0xff, 0xd8, 0x8f,
		 0x39, 0xdf, 0x23, 0xff, 0x16, 0x24, 0x0b};
    static const size_t d_sf9_cr4_wh_len = 511;

    lora_whiten::sptr
    lora_whiten::make(uint8_t CR, const std::string &len_tag_key)
    {
      return gnuradio::get_initial_sptr
        (new lora_whiten_impl(CR, len_tag_key));
    }

    /*
     * The private constructor
     */
    lora_whiten_impl::lora_whiten_impl(uint8_t CR, const std::string &len_tag_key)
      : gr::tagged_stream_block("lora_whiten",
              gr::io_signature::make(1, 1, sizeof(uint8_t)),
              gr::io_signature::make(1, 1, sizeof(uint8_t)), len_tag_key)
    {
		if (CR == 4) {
			d_wh = d_sf9_cr4_wh;
			d_wh_len = d_sf9_cr4_wh_len;
		}
	}

    int
    lora_whiten_impl::calculate_output_stream_length(const gr_vector_int &ninput_items)
    {
      return ninput_items[0];
    }

    int
    lora_whiten_impl::work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
      const uint8_t *in = (const uint8_t *) input_items[0];
      uint8_t *out = (uint8_t *) output_items[0];
	  uint8_t curr_wh_byte = 0;

	  if (ninput_items[0] > d_wh_len * 8) {
		  throw std::runtime_error("Packet too big to be dewhitened");
	  }

	  for (int i=0 ; i < ninput_items[0]/8 ; ++i) {
		  curr_wh_byte = d_wh[i];
		  for (int j=0 ; j < 8 ; ++j) {
			  out[i*8 + j] = in[i*8 + j] ^ (curr_wh_byte>>7)&0x01;

			  curr_wh_byte = curr_wh_byte<<1;
		  }
	  }

      // Tell runtime system how many output items we produced.
      return ninput_items[0];
    }

  } /* namespace lora2 */
} /* namespace gr */

